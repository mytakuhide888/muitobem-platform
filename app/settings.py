"""
Django settings for app project.
Generated by 'django-admin startproject' using Django 5.2.4.
"""

from pathlib import Path
import os
from urllib.parse import urlparse, parse_qs

# === Paths ===
BASE_DIR = Path(__file__).resolve().parent.parent

# === Core toggles from .env ===
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() == "true"
hosts_raw = os.getenv("DJANGO_ALLOWED_HOSTS", "")

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
USE_X_FORWARDED_HOST = True

# 2) CSRF 設定：.env の値を使う。無ければ https をデフォルト
_csrf_raw = os.getenv(
    "DJANGO_CSRF_TRUSTED_ORIGINS",
    "https://muitobem.top,https://www.muitobem.top",
)
CSRF_TRUSTED_ORIGINS = [h.strip() for h in _csrf_raw.split(",") if h.strip()]

# 3) Cookie を HTTPS 専用に
SESSION_COOKIE_SECURE = os.getenv("DJANGO_SESSION_COOKIE_SECURE", "True").lower() == "true"
CSRF_COOKIE_SECURE    = os.getenv("DJANGO_CSRF_COOKIE_SECURE", "True").lower() == "true"

# 4) HTTPS リダイレクト（Caddy で 80→443 は済みだがアプリ側も一応）
SECURE_SSL_REDIRECT = os.getenv("DJANGO_SECURE_SSL_REDIRECT", "True").lower() == "true"

#ALLOWED_HOSTS = [h for h in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if h] or []
ALLOWED_HOSTS = [h.strip() for h in hosts_raw.split(",") if h.strip()]
LANGUAGE_CODE = "ja"
TIME_ZONE = os.getenv("DJANGO_TIME_ZONE", "Asia/Tokyo")
USE_I18N = True
USE_TZ = True  # 必要に応じて False へ（JST naive 運用にしたい場合）

# === Secret Key ===
# 既存のリテラルを既定値にしつつ、.env の DJANGO_SECRET_KEY があれば優先
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-aj98%v(fzaudoz%975*eg$$f29m=!lmwra082lg&5v_t3!^$bw"
)

# === Applications ===
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_adminlte3",
    "sns_core",
    "social",
    "webhooks",
    "social_core",
    "ig",
    "th",
    "social_webhooks",
    "social_scheduler",
]

# === Middleware ===
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# === URLs / WSGI ===
ROOT_URLCONF = "app.urls"
WSGI_APPLICATION = "app.wsgi.application"

# === Templates ===
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# === Database (env優先 → 個別MYSQL_* → SQLite fallback) ===
def _db_from_url(url: str):
    u = urlparse(url)
    return {
        "ENGINE": "django.db.backends.mysql",
        "NAME": u.path.lstrip("/"),
        "USER": u.username or "",
        "PASSWORD": u.password or "",
        "HOST": u.hostname or "",
        "PORT": u.port or 3306,
        "OPTIONS": {"charset": parse_qs(u.query).get("charset", ["utf8mb4"])[0]},
    }

DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL:
    DATABASES = {"default": _db_from_url(DATABASE_URL)}
else:
    MYSQL_DB = os.getenv("MYSQL_DATABASE")
    MYSQL_USER = os.getenv("MYSQL_USER")
    MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD")
    MYSQL_HOST = os.getenv("MYSQL_HOST", "db")
    MYSQL_PORT = int(os.getenv("MYSQL_PORT", "3306"))
    if MYSQL_DB and MYSQL_USER and MYSQL_PASSWORD:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.mysql",
                "NAME": MYSQL_DB,
                "USER": MYSQL_USER,
                "PASSWORD": MYSQL_PASSWORD,
                "HOST": MYSQL_HOST,
                "PORT": MYSQL_PORT,
                "OPTIONS": {"charset": "utf8mb4"},
            }
        }
    else:
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }

# === Static files ===
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "deploy"        # collectstatic の出力（nginx が /static/ で配信）
# プロジェクト内の追加静的ファイルがあるなら有効化
STATICFILES_DIRS = [BASE_DIR / "static"] if (BASE_DIR / "static").exists() else []

# === Primary key default ===
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# === Instagram / Threads settings (envで上書き可能) ===
INSTAGRAM_PROFESSIONAL_ID = os.getenv("INSTAGRAM_PROFESSIONAL_ID", "17841475861395637")
THREADS_ACCESS_TOKEN = os.getenv("THREADS_ACCESS_TOKEN", "YOUR_THREADS_ACCESS_TOKEN")

FACEBOOK_APP_ID = os.getenv("FACEBOOK_APP_ID", "")
FACEBOOK_APP_SECRET = os.getenv("FACEBOOK_APP_SECRET", "")
IG_APP_ID = os.getenv("IG_APP_ID", "")
IG_APP_SECRET = os.getenv("IG_APP_SECRET", "")
IG_REDIRECT_URI = os.getenv("IG_REDIRECT_URI", "")
VERIFY_TOKEN_IG = os.getenv("VERIFY_TOKEN_IG", "test_token_ig")
VERIFY_TOKEN_TH = os.getenv("VERIFY_TOKEN_TH", "test_token_th")
TH_APP_ID = os.getenv("TH_APP_ID", "")
TH_APP_SECRET = os.getenv("TH_APP_SECRET", "")
DEFAULT_API_VERSION = os.getenv("DEFAULT_API_VERSION", "v23.0")
WORKER_INTERVAL_SEC = int(os.getenv("WORKER_INTERVAL_SEC", "5"))
